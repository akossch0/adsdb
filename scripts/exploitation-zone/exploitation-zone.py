import pandas as pd
from helper_functions import (
    remove_file,
    generate_ids_dict,
    generate_ids_tuples,
    normalize_section,
    normalize_year,
)
from data_io.data_io import load_data, copy_to_zone
from create_table_statements import (
    create_income_type_table_statement,
    create_location_table_statement,
    create_ac_level_table_statement,
    create_gender_table_statement,
    create_income_table_statement,
    create_education_table_statement,
)
from missings import (
    run_handle_missings,
    PREPARED_EDUCATION_TABLE_NAME,
    PREPARED_INCOME_TABLE_NAME,
)

EXPLOITATION_ZONE = "exploitation-zone"
datasets_root = "datasets"
trusted_db_path = "datasets/trusted-zone/trusted.db"
exploitation_db_path = "datasets/exploitation-zone/exploitation.db"
remove_file(exploitation_db_path)

# ===========================================TRANSFORMATIONS===========================================================
run_handle_missings()

income_df = load_data(exploitation_db_path, PREPARED_INCOME_TABLE_NAME)
education_df = load_data(exploitation_db_path, PREPARED_EDUCATION_TABLE_NAME)
meta_df = load_data(trusted_db_path, "meta")

translations = {
    "Media de la renta por unidad de consumo": "Median income per unit of consumption",
    "Mediana de la renta por unidad de consumo": "Median income per consumption unit",
    "Renta bruta media por hogar": "Average gross income per household",
    "Renta bruta media por persona": "Average gross income per person",
    "Renta neta media por hogar": "Median net income per household",
    "Renta neta media por persona ": "Average net income per person",
}

income_df["Indicadores de renta media y mediana"] = income_df[
    "Indicadores de renta media y mediana"
].map(translations)


income_df["Secciones"] = income_df.apply(normalize_section, axis=1)

education_df["Data_Referencia"] = education_df.apply(normalize_year, axis=1)

# ===========================================IncomeType table==========================================================
income_types = set(income_df["Indicadores de renta media y mediana"])
income_types_ids = generate_ids_dict(income_types)

income_type_table_df = pd.DataFrame(
    data=generate_ids_tuples(income_types_ids), columns=["id", "type"]
)

copy_to_zone(
    datasets_root,
    income_type_table_df,
    create_income_type_table_statement,
    "IncomeType",
    EXPLOITATION_ZONE,
)

# ===========================================Location table============================================================
location_set = set(
    zip(
        education_df["Seccio_Censal"],
        education_df["Nom_Districte"],
        education_df["Nom_Barri"],
    )
)
sections_income = set(income_df["Secciones"])
sections_education = set(education_df["Seccio_Censal"])
sections = sections_income.union(sections_education)

location_table_df = pd.DataFrame(
    data=location_set, columns=["section", "district_name", "neighborhood_name"]
)

copy_to_zone(
    datasets_root,
    location_table_df,
    create_location_table_statement,
    "Location",
    EXPLOITATION_ZONE,
)

# ===========================================AcademicLevel table=======================================================
ac_level_df = meta_df[meta_df["Desc_Dimensio"] == "NIV_EDUCA_esta"].reset_index()
ac_levels = set(zip(ac_level_df["Codi_Valor"], ac_level_df["Desc_Valor_EN"]))

academic_level_table_df = pd.DataFrame(data=ac_levels, columns=["id", "description"])

copy_to_zone(
    datasets_root,
    academic_level_table_df,
    create_ac_level_table_statement,
    "AcademicLevel",
    EXPLOITATION_ZONE,
)

# ===========================================Gender table==============================================================
gender_df = meta_df[meta_df["Desc_Dimensio"] == "SEXE"].reset_index()
genders = set(zip(gender_df["Codi_Valor"], gender_df["Desc_Valor_EN"]))

gender_table_df = pd.DataFrame(data=genders, columns=["id", "gender"])

copy_to_zone(
    datasets_root,
    gender_table_df,
    create_gender_table_statement,
    "Gender",
    EXPLOITATION_ZONE,
)

# ===========================================Time table==============================================================
education_years = set(
    [int(str(date).split("-")[0]) for date in list(education_df["Data_Referencia"])]
)

income_years = set(income_df["Periodo"])

# not needed to save, because we will store it as PKs directly in the Education and Income tables

# ===========================================Income table==========================================================
income_table_df = income_df.copy()
income_table_df["income_type_id"] = income_table_df[
    "Indicadores de renta media y mediana"
].map(income_types_ids)
income_table_df = income_table_df[["income_type_id", "Periodo", "Secciones", "Total"]]
income_table_df.rename(
    columns={"Periodo": "year", "Secciones": "section", "Total": "value"}, inplace=True
)

copy_to_zone(
    datasets_root,
    income_table_df,
    create_income_table_statement,
    "Income",
    EXPLOITATION_ZONE,
)

# ===========================================Education table==========================================================
education_table_df = education_df.copy()
education_table_df = education_table_df[
    ["Data_Referencia", "SEXE", "NIV_EDUCA_esta", "Seccio_Censal", "Valor"]
]
education_table_df.rename(
    columns={
        "Data_Referencia": "year",
        "Seccio_Censal": "section",
        "SEXE": "gender_id",
        "NIV_EDUCA_esta": "education_level_id",
        "Valor": "number_of_people",
    },
    inplace=True,
)
education_table_df = education_table_df.astype(int)

copy_to_zone(
    datasets_root,
    education_table_df,
    create_education_table_statement,
    "Education",
    EXPLOITATION_ZONE,
)
